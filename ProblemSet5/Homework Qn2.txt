We have to use a StringBuffer in this case because a String object is immutable. Using a String object in this case cause each thread to create a new String object to store the new modified value. As a result, the next thread will still be accessing the old String object instead of the new modified object, leading to an output with all letter “A”s. A StringBuffer object is thread-safe and mutable, allowing the object to be synchronised across the threads, and each thread modifies the value stored in the original StringBuffer object. 